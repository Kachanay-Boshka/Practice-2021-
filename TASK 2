#include <iostream>
using namespace std;


template<typename T>
class FooString
{
private:
	T* arr;
	int size;

public:

	FooString(T size1) {
		arr = new T[size1];
		size = size1;
		for (int i = 0; i < size; i++) {
			arr[i] = rand() % 100;
			cout << arr[i] << '\t';
		};
		if (size1 ==  NULL)
			throw bad_alloc();
	}

	~FooString() {
		delete[] arr;
	}

	int set(int i, T value) {
		if (i < size) {
			if (-100 <= value && value <= 100) {
				arr[i] = value;
			}

			else {
				throw  invalid_argument("Not included in the range [-100 ; 100]");
			}
		}
		else {
			cout << "There is no such index in the array" << '\n';
			int get();
		}
			return 0;
	}
	
	FooString(const FooString& copy)
	{
		size = copy.size;
		arr = new T[copy.size];
		for (int i = 0; i < size; i++) {
			arr[i] = copy.arr[i];
		};
		if (copy.size == NULL) {
			throw bad_alloc();
		}
	}

	 int get(int i) {
			 if (i < size) {
				 return arr[i];
			 }
			 throw out_of_range("Tried to get element out of array bounds!");
			 return arr[i];
		 }

	int show() {
		for (int i = 0; i < size; i++) {
			cout << arr[i] << '\t';
		};
		return 0;
	}

	FooString operator+(const FooString& second)
	{
		FooString result(second);
		int target_size = size;
		if (second.size < size)
			target_size = second.size;
		for (int i = 0; i < target_size; i++) {
			result.arr [i] = second.arr[i] + arr[i];
		}
		
		return result;
	}
	FooString operator-(const FooString& second)
	{
		FooString result(second);
		int target_size = size;
		if (second.size < size)
			target_size = second.size;
		for (int i = 0; i < target_size; i++) {
			result.arr[i] = second.arr[i] - arr[i];
		}
		return result;
	}
	
	T distan (FooString& copy) {
		int dist = 0;
		for (int i = 0; i < copy.size; i++)
		{
			dist = (arr[i] - copy.arr[i]) * (arr[i] - copy.arr[i]) + dist;
		}
		cout << sqrt(dist);
		return sqrt(dist);
	}
};




int main() {
	try {
		int size, a, b;
		int temp = 0;
		cout << "Enter the size of the arrays ";
		cin >> b;
		FooString<int> arr1(b);
		cout << '\n' << "The first array" << '\n';
		size = b - 1;
		cout << '\n';
		a = b;
		while (a > size) {
			try {
				cout << "The element number of this array ";
				cin >> a;
				arr1.get(a);
				cout << "Its value ";
				cin >> temp;
				arr1.set(a, temp);
			}
			catch (out_of_range& ex) {
				cout << ex.what() << '\n' << '\n';
			}
			catch (invalid_argument& ex) {
				cout << ex.what() << '\n';
			}
		}

		cout << '\n' << "The first array" << '\n';
		arr1.show();
		cout << '\n' << '\n';


		cout << "The second array " << '\n';
		FooString<int> arr2(b);
		size = b - 1;
		cout << '\n';
		a = b;
		while (a > size) {
			try {
				cout << "The element number of this array ";
				cin >> a;
				arr2.get(a);
				cout << "Its value ";
				cin >> temp;
				arr2.set(a, temp);
			}
			catch (out_of_range& ex) {
				cout << ex.what() << endl;
				cout << '\n';
			}
			catch (invalid_argument& ex) {
				cout << ex.what() << endl;
			}
		}
		cout << "The second array" << '\n';
		arr2.show();
		cout << '\n' << '\n';
		cout << "Addition" << endl;
		(arr1 + arr2).show();
		cout << '\n';
		cout << "Subtraction" << endl;
		(arr1 - arr2).show();
		cout << '\n' << '\n';
		arr1.show();
		cout << endl;
		arr2.show();
		cout << "Distance ";
		arr1.distan(arr2);
		return 0;
	}
	catch (bad_alloc& ex) {
		cout << ex.what();
	}
}
